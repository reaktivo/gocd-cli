#!/usr/bin/env node --harmony

const chalk = require('chalk');
const traceable = require('traceable');

const program = require('commander');
const pretty = require('pretty-js');
const stringify = require('json-stringify-safe');

const run = require('..');

process.on('uncaughtException', handleUncaughtException);
process.on('unhandledRejection', (err) => { throw new Error(err) });

program
  .version(require('../package.json').version)
  .option('-e, --endpoint <string>', 'Server host, e.g. https://frontend-gocd.travix.com/go')
  .option('-p, --pipeline <name>', 'Pipeline name')
  .option('--session <id>', 'Your session id')
  .option('-s, --stage <name>', 'Stage name')

program
  .command('logs')
  .description('Show logs for pipeline')
  .option('--startLineNumber <int>', 'Start line number', 0)
  .action(() => {
    const Logs = require('../commands/logs');
    new Logs(program);
  });

program
  .command('status')
  .description('Get status of pipeline')
  .action(() => {
    const Status = require('../commands/status');
    new Status(program)
  });

program
  .command('schedule')
  .description('Schedule a job in a pipeline')
  .option('--env <vars>', 'Pass in environment variable to use when scheduling pipeline. e.g. "ENV1=value ENV2=value"')
  .action(opts => {
    const Schedule = require('../commands/schedule');
    new Schedule(Object.assign(program, {
      env: opts.env
    }));
  });

program.parse(process.argv);

function handleUncaughtException(err) {
  console.log(chalk.red(err.message));
  console.log(traceable(err, {
    showFullPath: true,
    indent: 2,
    blackbox: ['module.js', 'node.js']
  }).toString());
  process.exit(1);
}

function handleUncaughtException2(err) {
  throw new Error(err);
}
